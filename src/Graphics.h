#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <SPI.h>
#include <Wire.h>
#include <Fonts/FreeMonoBold12pt7b.h>
#include <Fonts/FreeSerif9pt7b.h>
#include <Fonts/FreeSansBoldOblique24pt7b.h>
#include "font/FreeMono18pt7b.h"
#include <Fonts/FreeMono9pt7b.h>
#include "font/Font5x7FixedMono.h"
#include "font/CustomSymbolMono18pt7b.h"

#include "Anims.h"

#define SCREEN_I2C_ADDR 0x3C // or 0x3C
#define SCREEN_WIDTH 128     // OLED display width, in pixels
#define SCREEN_HEIGHT 32     // OLED display height, in pixels
#define OLED_RST_PIN -1      // Reset pin (-1 if not available)

Adafruit_SSD1306 display(128, 32, &Wire, OLED_RST_PIN);

int frame = 0;

// OLED Animation: sound
// Code auto-generated by https://wokwi.com/animator, graphics by icons8.com

#define FRAME_DELAY (42)
#define FRAME_WIDTH (32)
#define FRAME_HEIGHT (32)
#define FRAME_COUNT (sizeof(waves) / sizeof(waves[0]))
#define FRAME_COUNT_STARTUP (sizeof(puffinAnim) / sizeof(puffinAnim[0]))
#define FRAME_COUNT_PUFFIN (sizeof(puffinWaveAnim) / sizeof(puffinWaveAnim[0]))

// Display Functions
void startupAnimation() {
  Serial.println("Starting animation.");
  int height = 32;
  int width = 77;
  int frame = 0;
  int frameDelay = 100;
  while(frame <= FRAME_COUNT_STARTUP){
    display.clearDisplay();
    display.fillRect(0,0,25,32,1);
    display.fillRect(102,0,25,32,1);
    display.drawBitmap(25, 0, puffinAnim[frame], width, height, 1);
    display.display();
    frame = (frame + 1);
    delay(frameDelay);
  }
  display.clearDisplay();
  display.display();
}

void scrolltext(String text) {
  display.clearDisplay();

  display.setFont(&FreeSerif9pt7b);
  display.setTextSize(2); // Draw 2X-scale text
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(20, 28);
  display.println(text);
  display.display();      // Show initial text
  delay(1000);

  //display.startscrolldiagright(0x00, 0x07);
  //delay(2000);
  //display.startscrollleft(0x00, 0x07);
  //delay(40);
  display.stopscroll();
}

void smalltext(String text) {
  display.clearDisplay();

  display.setFont(&FreeSerif9pt7b);
  display.setTextSize(1); // Draw 2X-scale text
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 32);
  display.println(text);
  display.display();
}

/*
 * Use this function instead of display.drawChar to draw the symbol or to use
 * the default font if it's not in the symbol range.
 */
void drawSymbol(uint16_t x, uint16_t y, uint8_t c, uint16_t color, uint16_t bg, uint8_t Size){
  if( (c>=32) && (c<=126) ){ //If it's 33-126 then use standard mono 18 font
      display.setFont(&Font5x7FixedMono);
  } else {
    display.setFont(&SymbolMono18pt7b);//Otherwise use special symbol font
    if (c>126) {      //Remap anything above 126 to be in the range 32 and upwards
      c-=(127-32);
    }
  }
  display.drawChar(x,y,c,color,bg,Size);
}

void updateBatteryGraphic(float level){ // Adds battery info to the display buffer
  
  int fill = min(20,((level)/5 - 1));
  display.drawRect(100,0,24,11,1);
  display.drawRect(124,2,2,7,1);
  display.fillRect(102,2,fill,7,1);

  display.setFont(&Font5x7FixedMono);
  display.setTextSize(1); // Draw 2X-scale text
  display.setTextColor(SSD1306_WHITE);

  // Check VBUS status and add charging icon if present
  if(ums3.getVbusPresent()){
    display.setFont(&SymbolMono18pt7b);
    drawSymbol(80,14, MY_BOLT,SSD1306_WHITE,0,1);
  }
}

void displayBPM(){ // Adds BPM info to the display buffer
  display.setFont(&Font5x7FixedMono);
  display.setTextSize(1); // Draw 2X-scale text
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(84, 32);
  display.println(String(clk.getBPM()) + " bpm");
}

void displayBTStatus(){ // Adds bluetooth status to the display buffer
    display.setFont(&SymbolMono18pt7b);
    display.setTextSize(1);
    display.setTextColor(SSD1306_WHITE);
    if(Kbd.isConnected() || bleMIDIConnected()){ drawSymbol(-2,16, MY_BLUETOOTHSMALL,SSD1306_WHITE,0,1); }
    else {drawSymbol(-2,16, MY_BLUETOOTHOFF,SSD1306_WHITE,0,1);}
    display.drawCircle(10,24,7,SSD1306_WHITE);
    drawSymbol(8, 28, 0x41+getMacDevice(),SSD1306_WHITE,0,1);
}

void displayWPM(){
  display.setFont(&FreeMonoBold12pt7b);
  display.setTextSize(1); // Draw 2X-scale text
  display.setTextColor(SSD1306_WHITE);
  int wpm = getWPM();
  int pos = 74;
  if(wpm <10){
    pos += 14;
  }
  if (wpm <100){
    pos += 14;
  }
  display.setCursor(pos, 30);
  
  display.println(String(wpm));  
  display.setFont(&Font5x7FixedMono);
  display.setTextSize(1); // Draw 2X-scale text
  display.setCursor(122, 20);
  display.print(String("w"));
  display.setCursor(122, 26);
  display.print(String("p"));
  display.setCursor(122, 32);
  display.print(String("m"));
}

void updatePiano(bool active[12]){
  int xPos = 26;
  int yPos = 28;
  int hSpacing = 4;
  int vSpacing = 0;
  int radius = 3;
  for(int i = 0; i<5; i++){
    int vSpacing = 0;
    if(i == 1 || i == 3){ vSpacing = 6; }
    if(active[i]){
      display.fillCircle((hSpacing*i+xPos),yPos-vSpacing,radius,WHITE);
    } else {
      display.drawCircle((hSpacing*i+xPos),yPos-vSpacing,radius,WHITE);
    }
  }
  for(int i = 5; i<12; i++){
    int vSpacing = 0;
    if(i == 6 || i == 8 || i==10){ vSpacing = 6; }
    if(active[i]){
      display.fillCircle((hSpacing*i+xPos+4),yPos-vSpacing,radius,WHITE);
    } else {
      display.drawCircle((hSpacing*i+xPos+4),yPos-vSpacing,radius,WHITE);
    }
  }
}

void displayMIDI(int cycle){
  display.setFont(&FreeMono9pt7b);
  display.setTextSize(1);
  display.setCursor(42, 9);

  if(cycle == 0){
    clk.ext = false;
  }

  if (seq.serialOutput){
    display.println("trs");
  } else {
    display.println("ble");
  }
  if(clk.ext){
    display.setFont(&Font5x7FixedMono);
    display.setCursor(108, 23);
    display.println("EXT");
  }

  if(seq.s != 0){
    if(seq.play){
      drawSymbol(22,15,MY_PLAY,WHITE,0,1);
    } else {
      drawSymbol(22,15,MY_STOP,WHITE,0,1);
    }
  }

  updatePiano(activeNotes);

}

// counter for periodic display updates (500 display cycles)
int cycle = 0;
int reset = 1000;

// Main Display Update
void mainScreenUpdate() {
  if(cycle < reset) { cycle += 1; } else { cycle = 0; }

  // start refresh by clearing screen
  display.clearDisplay();

  // add current battery graphics to buffer
  updateBatteryGraphic(getBattLevel());


  if(midiMode){
    displayMIDI(cycle);
    displayBPM();
  } else { // if kb mode, display wpm and puffin guy
    // display current wpm
    displayWPM();

    // add puffin icon
    display.drawBitmap(40, 0, puffinWaveAnim[frame], FRAME_WIDTH, FRAME_HEIGHT, 1);
  }
  // add bluetooth status icon
  displayBTStatus();

  display.display();
  frame = (frame + 1) % FRAME_COUNT_PUFFIN;
  // delay(FRAME_DELAY);
}